{"version":3,"sources":["components/Fileread.js","components/Mapplot.js","App.js","index.js"],"names":["Fileread","props","uploadFile","event","a","persist","target","files","setState","waitingForFileUpload","fileList","latestUploadedFile","item","length","readUploadedFileAsText","fileContents","readLatLongFromText","latlong","uploadedFileContents","latlongFile","callbackFromParent","state","console","log","xmlSource","waypoints","style","display","type","onChange","this","readOnly","value","React","Component","inputFile","temporaryFileReader","FileReader","Promise","resolve","reject","onerror","abort","DOMException","onload","result","readAsText","textLatLong","domParser","DOMParser","parseFromString","i","ll","documentElement","getElementsByTagName","len","trackpoints","pt","parseFloat","getAttribute","push","Mapplot","lat","lng","zoom","latlongPoint","prevProps","position","Map","className","center","Polygon","color","weight","positions","TileLayer","attribution","url","Marker","Popup","App","myCallback","dataFromChild","gpslatLong","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.494c9ed2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./filereadstyle.css\";\r\n\r\nclass Fileread extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            uploadedFileContents: null,\r\n            latlongFile: [],\r\n            waitingForFileUpload: false,\r\n            xmlSource: null,\r\n            waypoints: [],\r\n        };\r\n    }\r\n\r\n    static readUploadedFileAsText = inputFile => {\r\n        const temporaryFileReader = new FileReader();\r\n\r\n        return new Promise((resolve, reject) => {\r\n            temporaryFileReader.onerror = () => {\r\n                temporaryFileReader.abort();\r\n                reject(new DOMException(\"Problem parsing input file.\"));\r\n            };\r\n\r\n            temporaryFileReader.onload = () => {\r\n                resolve(temporaryFileReader.result);\r\n            };\r\n            temporaryFileReader.readAsText(inputFile);\r\n        });\r\n    };\r\n\r\n    static readLatLongFromText = textLatLong => {\r\n        var domParser = new DOMParser();\r\n        return new Promise((resolve) => {\r\n            this.xmlSource = domParser.parseFromString(textLatLong, 'text/xml');\r\n            var ll = this.xmlSource.documentElement.getElementsByTagName(\"trkpt\");\r\n            var len = ll.length;\r\n            var i;\r\n            var trackpoints = [];\r\n            for (i = 0; i < len; i++) {\r\n                var pt = [];\r\n                pt = [parseFloat(ll.item(i).getAttribute(\"lat\")), parseFloat(ll.item(i).getAttribute(\"lon\"))];\r\n                trackpoints.push(pt);\r\n            }\r\n            resolve(trackpoints)\r\n        });\r\n    }\r\n\r\n    uploadFile = async event => {\r\n        event.persist();\r\n\r\n        if (!event.target || !event.target.files) {\r\n            return;\r\n        }\r\n\r\n        this.setState({ waitingForFileUpload: true });\r\n\r\n        const fileList = event.target.files;\r\n\r\n        // Uploads will push to the file input's `.files` array. Get the last uploaded file.\r\n        const latestUploadedFile = fileList.item(fileList.length - 1);\r\n\r\n        try {\r\n            const fileContents = await Fileread.readUploadedFileAsText(latestUploadedFile);\r\n            const latlong = await Fileread.readLatLongFromText(fileContents);\r\n\r\n            this.setState({\r\n                uploadedFileContents: fileContents,\r\n                latlongFile: latlong,\r\n                waitingForFileUpload: false\r\n            });\r\n\r\n            this.props.callbackFromParent(this.state.latlongFile)\r\n\r\n        } catch (e) {\r\n            console.log(e);\r\n            this.setState({\r\n                waitingForFileUpload: false\r\n            });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div style={{ display: \"grid\" }}>\r\n                <input type=\"file\" onChange={this.uploadFile} />\r\n                <textarea\r\n                    readOnly\r\n                    value={\r\n                        this.state.uploadedFileContents\r\n                            ? this.state.uploadedFileContents\r\n                            : \"No contents to display.\"\r\n                    }\r\n                />\r\n                {this.state.waitingForFileUpload && <span>Uploading file...</span>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Fileread","import React, { Component } from 'react'\r\nimport { Map, TileLayer, Marker, Popup, Polygon } from 'react-leaflet'\r\n\r\nexport default class Mapplot extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            lat: 31.708401,\r\n            lng: 76.932198,\r\n            zoom: 11,\r\n            latlongPoint: [[31.708401, 76.932198], [31.708401, 75.932198]]\r\n        }\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n\r\n        if (this.props.latlong !== prevProps.latlong) {\r\n            this.setState({\r\n                latlongPoint: this.props.latlong\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        console.log(\"Plotting ...\")\r\n        console.log(this.props.latlong)\r\n        console.log(this.state.latlongPoint)\r\n\r\n        const position = [this.state.lat, this.state.lng]\r\n        return (\r\n            <div>\r\n                <Map className=\"leaflet-container\" center={position} zoom={this.state.zoom}>\r\n                    <Polygon color=\"red\" weight=\"5\" positions={this.state.latlongPoint} />\r\n                    <TileLayer\r\n                        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    />\r\n                    <Marker position={position}>\r\n                        <Popup>\r\n                            Hey Buddy <br /> It's ITT MANDI.\r\n                        </Popup>\r\n                    </Marker>\r\n                </Map>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\nimport './App.css';\nimport Fileread from './components/Fileread';\n// eslint-disable-next-line\nimport Mapplot from './components/Mapplot'\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      gpslatLong: [[31.708401, 76.932198], [31.708401, 75.932198]]\n    };\n  }\n  myCallback = (dataFromChild) => {\n    this.setState({ gpslatLong: dataFromChild });\n  }\n\n  render() {\n    console.log(this.state.gpslatLong)\n    return (\n      <div>\n        <Fileread callbackFromParent={this.myCallback} />\n        <Mapplot latlong={this.state.gpslatLong} />\n      </div>\n    )\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}